name: Deploy Lugx Gaming Microservices to EKS

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ap-southeast-1
  EKS_CLUSTER_NAME: iit-eks-tests-01
  ECR_REGISTRY: 776231021342.dkr.ecr.ap-southeast-1.amazonaws.com
  ECR_REPOSITORY_PREFIX: iit-gaming-microservices

jobs:
  # =============================
  # 1. Build and Push Images
  # Dummy change to enable commit
  # =============================
  build-and-deploy:
    name: Build and Deploy to EKS
    runs-on: ubuntu-latest
    
    steps:
    # --- Build and Push Images ---
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./services/frontend
        platforms: linux/amd64
        push: true
        tags: |
          ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_PREFIX }}/frontend:latest
          ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_PREFIX }}/frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Gaming Service image
      uses: docker/build-push-action@v5
      with:
        context: ./services/gaming-service
        platforms: linux/amd64
        push: true
        tags: |
          ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_PREFIX }}/gaming-service:latest
          ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_PREFIX }}/gaming-service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Order Service image
      uses: docker/build-push-action@v5
      with:
        context: ./services/order-service
        platforms: linux/amd64
        push: true
        tags: |
          ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_PREFIX }}/order-service:latest
          ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_PREFIX }}/order-service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Analytics Service image
      uses: docker/build-push-action@v5
      with:
        context: ./services/analytics-service
        platforms: linux/amd64
        push: true
        tags: |
          ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_PREFIX }}/analytics-service:latest
          ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_PREFIX }}/analytics-service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max


    - name: Install kubectl
    # =============================
    # 2. Deploy to EKS
    # =============================
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Update kubeconfig for EKS
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Install Kustomize
      run: |
        if [ -d "kustomize" ]; then rm -rf kustomize; fi
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/

    - name: Deploy to EKS (Development)
    # --- Deploy to EKS (Development) ---
      if: github.ref == 'refs/heads/develop'
      run: |
        cd kustomize/overlays/dev
        kustomize edit set image frontend=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_PREFIX }}/frontend:${{ github.sha }}
        kustomize edit set image gaming-service=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_PREFIX }}/gaming-service:${{ github.sha }}
        kustomize edit set image order-service=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_PREFIX }}/order-service:${{ github.sha }}
        kustomize edit set image analytics-service=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_PREFIX }}/analytics-service:${{ github.sha }}
        cd ../..
        kubectl apply -k kustomize/overlays/dev

    - name: Deploy to EKS (Production)
    # --- Deploy to EKS (Production) ---
      if: github.ref == 'refs/heads/main'
      run: |
        cd kustomize/overlays/dev
        kustomize edit set image frontend=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_PREFIX }}/frontend:${{ github.sha }}
        kustomize edit set image gaming-service=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_PREFIX }}/gaming-service:${{ github.sha }}
        kustomize edit set image order-service=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_PREFIX }}/order-service:${{ github.sha }}
        kustomize edit set image analytics-service=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_PREFIX }}/analytics-service:${{ github.sha }}
        cd ../..
        kubectl apply -k kustomize/overlays/dev

    - name: Verify deployment
    # --- Verify and Wait for Deployment ---
      run: |
        kubectl get pods -n lugx-gaming
        kubectl get services -n lugx-gaming
        kubectl get ingress -n lugx-gaming

    - name: Wait for deployment to complete
      run: |
        kubectl rollout status deployment/frontend -n lugx-gaming --timeout=300s
        kubectl rollout status deployment/gaming-service -n lugx-gaming --timeout=300s
        kubectl rollout status deployment/order-service -n lugx-gaming --timeout=300s
        kubectl rollout status deployment/analytics-service -n lugx-gaming --timeout=300s

    - name: Run health checks
    # --- Run Health Checks ---
      run: |
        echo "Waiting for ALB to be ready..."
        sleep 60
        
        # Get ALB hostname
        ALB_HOSTNAME=$(kubectl get ingress gaming-microservices-ingress -n lugx-gaming -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        echo "ALB Hostname: $ALB_HOSTNAME"
        
        # Test frontend
        curl -f "http://$ALB_HOSTNAME" || exit 1
        
        # Test API endpoints
        curl -f "http://$ALB_HOSTNAME/api/products" || exit 1
        curl -f "http://$ALB_HOSTNAME/api/users" || exit 1
        
        echo "All health checks passed!"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: always()
    
    steps:
    # =============================
    # 3. Notify Deployment Status
    # =============================
    # --- Notify Deployment Status ---
    - name: Deployment Success Notification
      if: needs.build-and-deploy.result == 'success'
      run: |
        echo "‚úÖ Deployment to EKS completed successfully!"
        echo "üöÄ Application URL: http://k8s-lugxgami-gamingmi-04b5035527-659051128.ap-southeast-1.elb.amazonaws.com"
        
    - name: Deployment Failure Notification
      if: needs.build-and-deploy.result == 'failure'
      run: |
        echo "‚ùå Deployment to EKS failed!"
        echo "Please check the logs for more details."
