name: Deploy LUGX Gaming to EKS

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  AWS_REGION: ap-southeast-1
  ECR_REGISTRY: 036160411895.dkr.ecr.ap-southeast-1.amazonaws.com
  EKS_CLUSTER_NAME: lugx-gaming-cluster

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set environment
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "ENVIRONMENT=prod" >> $GITHUB_ENV
          echo "IMAGE_TAG=latest-$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV
        else
          echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          echo "IMAGE_TAG=dev-$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV
        fi

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push images
      run: |
        services=("frontend" "gaming-service" "order-service" "analytics-service")
        
        for service in "${services[@]}"; do
          echo "üèóÔ∏è Building $service..."
          IMAGE_URI="${ECR_REGISTRY}/lugx-gaming/$service:$IMAGE_TAG"
          
          docker build -t $IMAGE_URI ./services/$service/
          docker push $IMAGE_URI
          
          echo "‚úÖ Pushed: $IMAGE_URI"
        done

    - name: Setup kubectl and Kustomize
      run: |
        # Install kubectl
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        
        # Install kustomize
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/

    - name: Configure kubectl for EKS
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}
        kubectl cluster-info

    - name: Update Kustomize with new images
      run: |
        cd kustomize/overlays/$ENVIRONMENT
        
        # Update image tags
        kustomize edit set image \
          frontend=${{ env.ECR_REGISTRY }}/lugx-gaming/frontend:${{ env.IMAGE_TAG }} \
          gaming-service=${{ env.ECR_REGISTRY }}/lugx-gaming/gaming-service:${{ env.IMAGE_TAG }} \
          order-service=${{ env.ECR_REGISTRY }}/lugx-gaming/order-service:${{ env.IMAGE_TAG }} \
          analytics-service=${{ env.ECR_REGISTRY }}/lugx-gaming/analytics-service:${{ env.IMAGE_TAG }}

    - name: Deploy to EKS
      run: |
        echo "üöÄ Deploying to EKS ($ENVIRONMENT environment)..."
        
        # Apply Kustomize configuration
        kustomize build kustomize/overlays/$ENVIRONMENT | kubectl apply -f -
        
        echo "‚úÖ Deployment applied"

    - name: Wait for rollout
      run: |
        echo "‚è≥ Waiting for deployments..."
        
        kubectl rollout status deployment/frontend -n lugx-gaming --timeout=300s
        kubectl rollout status deployment/gaming-service -n lugx-gaming --timeout=300s
        kubectl rollout status deployment/order-service -n lugx-gaming --timeout=300s
        kubectl rollout status deployment/analytics-service -n lugx-gaming --timeout=300s
        
        echo "‚úÖ All deployments ready!"

    - name: Verify deployment
      run: |
        echo "üîç Deployment status:"
        kubectl get pods -n lugx-gaming
        kubectl get services -n lugx-gaming
        kubectl get ingress -n lugx-gaming
        
        # Check for failed pods
        FAILED=$(kubectl get pods -n lugx-gaming --field-selector=status.phase!=Running --no-headers | wc -l)
        if [ "$FAILED" -gt 0 ]; then
          echo "‚ùå Some pods failed:"
          kubectl get pods -n lugx-gaming --field-selector=status.phase!=Running
          exit 1
        fi
        
        echo "üéâ Deployment successful!"
        echo "Environment: $ENVIRONMENT"
        echo "Image tag: $IMAGE_TAG"
